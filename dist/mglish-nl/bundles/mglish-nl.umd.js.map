{"version":3,"file":"mglish-nl.umd.js.map","sources":["ng://mglish-nl/lib/mglish-nl.service.ts","ng://mglish-nl/lib/mglish-nl.component.ts","ng://mglish-nl/lib/mglish-nl.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MglishNlService {\n  private debug = true;\n\n  constructor(private http: HttpClient) { }\n\n  private request(text: string, apiKeyGoogle: string) {\n    const params = new HttpParams().append('key', apiKeyGoogle);\n    const url = 'https://cors-anywhere.herokuapp.com/https://language.googleapis.com/v1beta2/documents:analyzeSyntax';\n    const request = {\n      'document': {\n        'content': text,\n        'type': 'PLAIN_TEXT',\n      },\n      'encodingType': 'UTF8',\n    };\n    const options = { headers: { 'Content-Type': 'application/json' }, params: params };\n\n    return this.http.post(url, JSON.stringify(request), options);\n  }\n\n  chunkText(text: string, apiKeyGoogle: string) {\n    const textToChunk = text.replace(/\\â|\\â/g, '\\\"').replace(/\\â/g, '\\'').replace(/\\â/g, '\\-').replace(/\\â¦/g, '...');\n    return new Observable((subscriber) => this.request(textToChunk, apiKeyGoogle).subscribe(\n      (result: any) => {\n        subscriber.next(this.getTextWithChunk(result, textToChunk));\n        subscriber.complete();\n      },\n      error => {\n        subscriber.error(error);\n      })\n    );\n  }\n\n  chunkTextArray(textArray: string[], apiKeyGoogle: string) {\n    let textToChunk = '';\n    for (let i = 0; i < textArray.length; i++) {\n      textToChunk += textArray[i] + 'ã';\n    }\n    textToChunk = textToChunk.replace(/\\â|\\â/g, '\\\"').replace(/\\â/g, '\\'').replace(/\\â/g, '\\-').replace(/\\â¦/g, '...');\n    return new Observable((subscriber) => this.request(textToChunk, apiKeyGoogle).subscribe(\n      (result: any) => {\n        const textWithChunk = this.getTextWithChunk(result, textToChunk.replace(/ã/g, '|||'));\n        const textChunkArray = textWithChunk.split(/\\|{3,}/g);\n        textChunkArray.pop();\n        subscriber.next(textChunkArray);\n        subscriber.complete();\n      },\n      error => {\n        subscriber.error(error);\n      })\n    );\n  }\n\n  textWithMitre(text: string, apiKeyGoogle: string) {\n    const textToChunk = text.replace(/\\â|\\â/g, '\\\"').replace(/\\â/g, '\\'').replace(/\\â/g, '\\-');\n    return new Observable((subscriber) => this.request(textToChunk, apiKeyGoogle).subscribe(\n      (result: any) => {\n        subscriber.next(this.getTextWithMitre(result, textToChunk));\n        subscriber.complete();\n      },\n      error => {\n        subscriber.error(error);\n      })\n    );\n  }\n\n  textWithBreakLine(text: string, apiKeyGoogle: string) {\n    const textToChunk = text.replace(/\\â|\\â/g, '\\\"').replace(/\\â/g, '\\'').replace(/\\â/g, '\\-');\n    return new Observable((subscriber) => this.request(textToChunk, apiKeyGoogle).subscribe(\n      (result: any) => {\n        subscriber.next(this.getTextWithBreakLine(result, textToChunk));\n        subscriber.complete();\n      },\n      error => {\n        subscriber.error(error);\n      })\n    );\n  }\n\n  chunkPositionList(text: string, apiKeyGoogle: string) {\n    const textToChunk = text.replace(/\\â|\\â/g, '\\\"').replace(/\\â/g, '\\'').replace(/\\â/g, '\\-');\n    return new Observable((subscriber) => this.request(textToChunk, apiKeyGoogle).subscribe(\n      (result: any) => {\n        subscriber.next(this.handle(result, textToChunk));\n        subscriber.complete();\n      },\n      error => {\n        subscriber.error(error);\n      })\n    );\n  }\n\n\n  private getTextWithMitre(result: { sentences: [], tokens: [], language: string }, text: string) {\n    const chunkPositionList = this.handle(result, text);\n    if (Object.keys(chunkPositionList).length === 0) {\n      return 'ã' + text + 'ã';\n    } else {\n      let newText = '';\n      let previousPosition = 0;\n      let fragment = '';\n      for (const key in chunkPositionList) {\n        if (chunkPositionList.hasOwnProperty(key)) {\n          const tmp = text.substring(chunkPositionList[previousPosition], chunkPositionList[key]);\n          let countBegin = 0;\n          let countEnd = tmp.length - 1;\n          while (countBegin < tmp.length && tmp.charAt(countBegin) === '\\n') {\n            countBegin++;\n          }\n          while (countEnd > 0 && tmp.charAt(countEnd) === '\\n') {\n            countEnd--;\n          }\n          countEnd = tmp.length - 1 - countEnd;\n\n          fragment = '\\n'.repeat(countBegin);\n          fragment += 'ã';\n          fragment += tmp.trim();\n          fragment += 'ã' + '\\n'.repeat(countEnd);\n          if (countEnd === 0) {\n            fragment += 'ã';\n          }\n\n          newText = newText + fragment;\n          previousPosition = +key;\n        }\n      }\n      const tmpLast = text.substring(chunkPositionList[previousPosition], text.length);\n      let count = 0;\n      while (count < tmpLast.length && tmpLast.charAt(count) === '\\n') {\n        count++;\n      }\n\n      fragment = count === 0 ? '' : '\\n'.repeat(count);\n      fragment += 'ã' + tmpLast.trim() + 'ã';\n      newText = newText + fragment;\n      return newText;\n    }\n  }\n\n  private getTextWithBreakLine(result: { sentences: [], tokens: [], language: string }, text: string) {\n    const chunkPositionList = this.handle(result, text);\n    if (Object.keys(chunkPositionList).length === 0) {\n      return text;\n    } else {\n      const part = [];\n      let previousPosition = 0;\n      let fragment: string;\n      for (const key in chunkPositionList) {\n        if (chunkPositionList.hasOwnProperty(key)) {\n          fragment = text.substring(chunkPositionList[previousPosition], chunkPositionList[key]);\n          part.push(fragment);\n          previousPosition = +key;\n        }\n      }\n      fragment = text.substring(chunkPositionList[previousPosition], text.length);\n      part.push(fragment);\n      console.log(part);\n      return part.join('\\n');\n    }\n  }\n\n  private getTextWithChunk(result: { sentences: [], tokens: [], language: string }, text: string) {\n    const chunkPositionList = this.handle(result, text);\n    if (Object.keys(chunkPositionList).length === 0) {\n      return text;\n    } else {\n      const part = [];\n      let previousPosition = 0;\n      let fragment: string;\n      for (const key in chunkPositionList) {\n        if (chunkPositionList.hasOwnProperty(key)) {\n          fragment = text.substring(chunkPositionList[previousPosition], chunkPositionList[key]);\n          part.push(fragment);\n          previousPosition = +key;\n        }\n      }\n      fragment = text.substring(chunkPositionList[previousPosition], text.length);\n      part.push(fragment);\n      console.log(part);\n      return part.join('|');\n    }\n  }\n\n  handle(result: { sentences: [], tokens: [], language: string }, text: string) {\n    const chunkPositionList: Record<number, number> = {};\n    const tokens = result.tokens;\n\n    for (let i = 0; i < tokens.length; i++) {\n      switch (tokens[i]['dependencyEdge']['label']) {\n        case 'ROOT':\n          this.handleVerb(tokens, i, chunkPositionList);\n          break;\n        case 'CCOMP':\n          this.handleVerb(tokens, i, chunkPositionList);\n          break;\n        case 'RCMOD':\n          this.handleVerb(tokens, i, chunkPositionList);\n          break;\n        case 'CONJ':\n          if (this.isConjugateVerb(i, tokens) || tokens[tokens[i]['dependencyEdge']['headTokenIndex']]['dependencyEdge']['label'] === 'ROOT'\n            || tokens[tokens[i]['dependencyEdge']['headTokenIndex']]['dependencyEdge']['label'] === 'CCOMP'\n            || tokens[tokens[i]['dependencyEdge']['headTokenIndex']]['dependencyEdge']['label'] === 'RCMOD'\n            || tokens[tokens[i]['dependencyEdge']['headTokenIndex']]['dependencyEdge']['label'] === 'ADVCL'\n            || tokens[tokens[i]['dependencyEdge']['headTokenIndex']]['dependencyEdge']['label'] === 'PARATAXIS') {\n            this.handleVerb(tokens, i, chunkPositionList);\n          }\n          break;\n        case 'PARATAXIS':\n          if (this.isConjugateVerb(i, tokens)) {\n            this.handleVerb(tokens, i, chunkPositionList);\n          }\n          break;\n        case 'ADVCL':\n          if (tokens[i]['partOfSpeech']['tag'] === 'VERB') {\n            this.handleVerb(tokens, i, chunkPositionList);\n          }\n          break;\n        // acomp example : being able, cut after acomp if exist\n        case 'PCOMP':\n          if (i > 1 && i < tokens.length - 1) {\n            if (i < tokens.length - 2 && this.checkLabel(['ACOMP'], i + 1, tokens)) {\n              this.addChunk(chunkPositionList, i + 2, tokens, 'pcomp + acomp:' + i);\n            } else {\n              this.addChunk(chunkPositionList, i + 1, tokens, 'pcomp:' + i);\n            }\n          }\n          break;\n        case 'PREP':\n          // check if previous word is related, chunk if not\n          // special rules: break if previous word = aux\n          // chunk before previous words if previous word = mwe\n          if (i > 2 && (this.checkLabel(['AUX', 'AUXPASS'], i - 1, tokens)\n            && tokens[i - 1]['dependencyEdge']['headTokenIndex'] > i)) {\n            break;\n          }\n          if (i > 2 && ((this.checkLabel(['MWE'], i - 1, tokens) && tokens[i - 1]['dependencyEdge']['headTokenIndex'] === i))) {\n            this.checkCCAndChunk(chunkPositionList, i - 1, tokens, 'prep mwe:' + i);\n            break;\n          }\n          if (i > 0 && tokens[i]['dependencyEdge']['headTokenIndex'] !== i - 1 &&\n            tokens[i - 1]['dependencyEdge']['headTokenIndex'] !== i) {\n            if (i > 1 && this.isConjugateVerb(i - 2, tokens)) {\n              break;\n            }\n            this.checkCCAndChunk(chunkPositionList, i, tokens, 'prep:' + i);\n          }\n          break;\n        case 'MARK':\n          if (i > 1) {\n            this.addChunk(chunkPositionList, i, tokens, 'mark: ' + i);\n          }\n          break;\n        case 'NSUBJ':\n          this.handleSubj(tokens, i, chunkPositionList);\n          break;\n        case 'NSUBJPASS':\n          this.handleSubj(tokens, i, chunkPositionList);\n          break;\n        case 'P':\n          if (tokens[i]['text']['content'] === '.' || tokens[i]['text']['content'] === '!' || tokens[i]['text']['content'] === '?') {\n            if (i < tokens.length - 1) {\n              console.log(tokens[i + 1]['text']['content'] === '-');\n            }\n            if (i < tokens.length - 1\n              && !(tokens[i + 1]['text']['content'] === '.'\n                || tokens[i + 1]['text']['content'] === '!'\n                || tokens[i + 1]['text']['content'] === '?'\n                || tokens[i + 1]['text']['content'] === '-')) {\n              this.addChunk(chunkPositionList, i + 1, tokens, 'punctuation: ' + i);\n            }\n          }\n          break;\n        case 'CC':\n          // chunk if words behind and after too long\n          const indexFirst = tokens[i]['dependencyEdge']['headTokenIndex'];\n          if (i < indexFirst) {\n            break;\n          }\n          let indexSecond: number;\n          for (let k = i + 1; k < tokens.length; k++) {\n            if (this.checkLabel(['CONJ'], k, tokens) && tokens[k]['dependencyEdge']['headTokenIndex'] === indexFirst) {\n              indexSecond = k;\n              break;\n            }\n          }\n          if (typeof indexSecond === 'undefined') {\n            break;\n          }\n          let count = indexSecond - indexFirst;\n          let a = indexFirst - 1;\n          while (a > 0 && tokens[a]['dependencyEdge']['headTokenIndex'] === indexFirst) {\n            count++;\n            a--;\n          }\n          let b = indexSecond + 1;\n          while (b > tokens.length - 1 && tokens[b]['dependencyEdge']['headTokenIndex'] === indexSecond) {\n            count++;\n            b++;\n          }\n          if (count > 2) {\n            this.addChunk(chunkPositionList, i, tokens, 'cc :' + i);\n          }\n          break;\n        case 'AUX':\n          // chunk if following is verb, example 'to do'\n          if (i > 0 && i < tokens.length - 2 && tokens[i]['partOfSpeech']['tag'] === 'PRT'\n            && tokens[i + 1]['partOfSpeech']['tag'] === 'VERB') {\n            this.addChunk(chunkPositionList, i, tokens, 'aux :' + i);\n          }\n          break;\n        case 'VMOD':\n          // chunk before vmod if previous word not verb\n          if (i > 2 && tokens[i - 1]['partOfSpeech']['tag'] !== 'PRT') {\n            this.addChunk(chunkPositionList, i, tokens, 'vmod :' + i);\n          }\n          break;\n        case 'ADVMOD':\n          // chunk before vmod if previous word not verb\n          if (i > 2 && (tokens[i]['text']['content'] === 'as'\n            || tokens[i]['text']['content'] === 'when' || tokens[i]['text']['content'] === 'where')) {\n            this.addChunk(chunkPositionList, i, tokens, 'advmod :' + i);\n          }\n          break;\n        default:\n          break;\n      }\n    }\n\n    this.handleTooLongPart(tokens, chunkPositionList);\n    this.removeTooShortPart(tokens, chunkPositionList);\n\n    return chunkPositionList;\n  }\n\n  // chunk after verb, keep following prt if exists\n  private handleVerb(tokens: any, index: number, chunkPositionList: Record<number, number>) {\n    if (index !== tokens.length - 1 &&\n      ((this.checkLabel(['PRT', 'XCOMP'], index + 1, tokens) && tokens[index + 1]['dependencyEdge']['headTokenIndex'] === index)\n        || this.checkLabel(['ACOMP'], index + 1, tokens))\n    ) {\n      if (index + 1 < tokens.length - 1) {\n        this.addChunk(chunkPositionList, index + 2, tokens, 'verb :' + index);\n      }\n    } else {\n      if (index !== tokens.length - 1) {\n        this.addChunk(chunkPositionList, index + 1, tokens, 'verb :' + index);\n      }\n    }\n  }\n\n  // check length of subject if too long, chunk subj / verb\n  private handleSubj(tokens: any, index: number, chunkPositionList: Record<number, number>) {\n    if (!(index < tokens.length - 1 && ((<string>tokens[index + 1]['text']['content']).startsWith('\\'')\n      || (<string>tokens[index + 1]['text']['content']).startsWith('\\â')))) {\n      const verbIndex = tokens[index]['dependencyEdge']['headTokenIndex'];\n      const verbIndexHead = tokens[verbIndex]['dependencyEdge']['headTokenIndex'];\n\n      let k = index - 1;\n      while (k >= 0 && (tokens[k]['dependencyEdge']['headTokenIndex'] === index\n        || tokens[k]['dependencyEdge']['headTokenIndex'] === k + 1\n        || tokens[k]['dependencyEdge']['headTokenIndex'] === verbIndex\n        || (tokens[k]['dependencyEdge']['headTokenIndex'] === verbIndexHead && !this.checkLabel(['P'], k, tokens))\n        || this.checkLabel(['ADVMOD', 'AMOD', 'PS'], index - 1, tokens))) {\n        k--;\n      }\n      if (k > 0) {\n        this.checkCCAndChunk(chunkPositionList, k + 1, tokens, 'nsubj: ' + index);\n      }\n\n      if (verbIndex < index) {\n        if (index !== tokens.length - 1 &&\n          ((this.checkLabel(['PRT'], verbIndex + 1, tokens) && tokens[verbIndex + 1]['dependencyEdge']['headTokenIndex'] === verbIndex)\n            || this.checkLabel(['ACOMP'], verbIndex + 1, tokens))\n        ) {\n          if (verbIndex + 1 < tokens.length - 1) {\n            delete chunkPositionList[verbIndex + 2];\n          }\n        } else {\n          if (verbIndex !== tokens.length - 1) {\n            delete chunkPositionList[verbIndex + 1];\n          }\n        }\n      } else {\n        let count = verbIndex - index + 1;\n\n        if (verbIndex < tokens.length - 1 &&\n          this.checkLabel(['PRT'], verbIndex + 1, tokens) && tokens[verbIndex + 1]['dependencyEdge']['headTokenIndex'] === index) {\n          count++;\n        }\n        let j = index - 1;\n        while (j >= 0 && tokens[j]['dependencyEdge']['headTokenIndex'] <= verbIndex\n          && (tokens[j]['dependencyEdge']['headTokenIndex'] >= j)) {\n          count++;\n          j--;\n        }\n\n        if (count > 5) {\n          if (verbIndex > 2 && (this.checkLabel(['AUX', 'AUXPASS'], verbIndex - 2, tokens))) {\n            this.addChunk(chunkPositionList, verbIndex - 2, tokens, 'subj + aux 2:' + index);\n          } else {\n            if (verbIndex > 1 && (this.checkLabel(['AUX', 'AUXPASS'], verbIndex - 1, tokens))) {\n              this.addChunk(chunkPositionList, verbIndex - 1, tokens, 'subj + aux 1:' + index);\n            } else {\n              if (verbIndex > 1) {\n                this.addChunk(chunkPositionList, verbIndex, tokens, 'subj:' + index);\n              }\n            }\n          }\n        }\n        console.log('count ' + index + ': ' + count);\n      }\n    }\n  }\n\n  private handleTooLongPart(tokens: any, chunkPositionList: Record<number, number>) {\n    const keys = Object.keys(chunkPositionList);\n    let previousKey = 0;\n    let key, length: number;\n    for (let index = 0; index < keys.length; index++) {\n      key = keys[index];\n      if (chunkPositionList.hasOwnProperty(key)) {\n        length = +key - previousKey;\n        if (length >= 6) {\n          const stringlength = +tokens[key]['text']['beginOffset'] - +tokens[previousKey]['text']['beginOffset'];\n          console.log(stringlength);\n          if (stringlength >= 35) {\n            const prepList = [];\n            const commaList = [];\n            for (let i = previousKey + 2; i < +key; i++) {\n              switch (tokens[i]['dependencyEdge']['label']) {\n                case 'PREP':\n                  // if (i > 1 && tokens[i - 1]['partOfSpeech']['tag'] === 'VERB') {\n                  //   break;\n                  // }\n                  if (i > 2 && (this.checkLabel(['AUX', 'AUXPASS'], i - 1, tokens))\n                    && tokens[i - 1]['dependencyEdge']['headTokenIndex'] > i) {\n                    break;\n                  }\n                  // if (tokens[i]['text']['content'] === 'of') {\n                  //   prepList.push(i + 1);\n                  // } else {\n                  prepList.push(i);\n                  // }\n                  break;\n                case 'P':\n                  if (tokens[i]['text']['content'] === ',' || tokens[i]['text']['content'] === ';') {\n                    commaList.push(i);\n                  }\n                  break;\n                default:\n                  break;\n              }\n            }\n            this.chunkTooLong(tokens, chunkPositionList, prepList, commaList, +key, previousKey);\n          } else {\n            console.log('not too long 1: ' + stringlength);\n          }\n        }\n        previousKey = +key;\n      }\n    }\n    key = tokens.length - 1;\n    length = +key - previousKey + 1;\n    if (length >= 6) {\n      const stringlength = +tokens[key]['text']['beginOffset'] - +tokens[previousKey]['text']['beginOffset'];\n      if (stringlength >= 35) {\n        console.log(previousKey + ' to ' + key + ' too long: ' + stringlength);\n        const prepList = [];\n        const commaList = [];\n        for (let i = previousKey + 2; i < +key; i++) {\n          switch (tokens[i]['dependencyEdge']['label']) {\n            case 'PREP':\n              prepList.push(i);\n              break;\n            case 'P':\n              if (tokens[i]['text']['content'] === ',' || tokens[i]['text']['content'] === ';') {\n                commaList.push(i);\n              }\n              break;\n            default:\n              break;\n          }\n        }\n        this.chunkTooLong(tokens, chunkPositionList, prepList, commaList, +key, previousKey);\n      } else {\n        console.log('not too long 2: ' + stringlength);\n      }\n    }\n    console.log(chunkPositionList);\n  }\n\n  private chunkTooLong(tokens: any, chunkPositionList: Record<number, number>, prepList: number[],\n    commaList: number[], key: number, previousKey: number) {\n    console.log(previousKey + ' to ' + key + ' too long: ');\n\n    let closest = null;\n    if (prepList.length !== 0) {\n      console.log(prepList);\n      const goal = (key + previousKey) / 2;\n      console.log('goal: ' + goal);\n      closest = prepList.reduce(function (prev, curr) {\n        return (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev);\n      });\n      if (closest < key && closest > previousKey) {\n        this.addChunk(chunkPositionList, closest, tokens, 'too long part prep: ' + closest);\n\n        const index = prepList.indexOf(closest);\n        prepList.splice(index, 1);\n      } else {\n        closest = null;\n      }\n    } else {\n      if (commaList.length !== 0) {\n        console.log(commaList);\n        const goal = (+key + previousKey) / 2;\n        console.log('goal: ' + goal);\n        closest = commaList.reduce(function (prev, curr) {\n          return (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev);\n        });\n        console.log('closest: ' + closest);\n\n        if (closest < key && closest > previousKey) {\n          this.addChunk(chunkPositionList, closest + 1, tokens, 'too long part comma:' + closest);\n\n          const index = commaList.indexOf(closest);\n          commaList.splice(index, 1);\n        } else {\n          closest = null;\n        }\n      }\n    }\n    if (closest !== null) {\n      const length1 = +tokens[closest]['text']['beginOffset'] - +tokens[previousKey]['text']['beginOffset'];\n      const length2 = +tokens[key]['text']['beginOffset'] - +tokens[closest]['text']['beginOffset'];\n      console.log('1: ' + length1 + ' 2: ' + length2);\n      if (length1 > 30) {\n        this.chunkTooLong(tokens, chunkPositionList, prepList, commaList, closest, previousKey);\n      }\n      if (length2 > 30) {\n        this.chunkTooLong(tokens, chunkPositionList, prepList, commaList, key, closest);\n      }\n    }\n  }\n\n  private removeTooShortPart(tokens: any, chunkPositionList: Record<number, number>) {\n    const keys = Object.keys(chunkPositionList);\n    let previousKey = 0;\n    let key, length;\n    for (let index = 0; index < keys.length; index++) {\n      key = keys[index];\n      if (chunkPositionList.hasOwnProperty(key)) {\n        length = +key - previousKey;\n        if (length === 1) {\n          if ((tokens[previousKey]['partOfSpeech']['tag'] === 'VERB' && !this.checkLabel(['VMOD'], previousKey, tokens) ||\n            (previousKey > 0 && this.checkLabel(['P'], previousKey - 1, tokens)))) {\n            delete chunkPositionList[key];\n          } else {\n            if (tokens[previousKey]['dependencyEdge']['headTokenIndex'] < previousKey\n              || (!this.checkLabel(['ADVMOD'], previousKey, tokens) && this.isConjugateVerb(previousKey - 1, tokens))) {\n              delete chunkPositionList[previousKey];\n              console.log('previous');\n            } else {\n              delete chunkPositionList[key];\n              console.log('next');\n            }\n          }\n          if (this.debug) {\n            console.log('remove chunk too short: ' + key);\n          }\n        }\n        if (length === 2) {\n          if (previousKey !== 0 && this.checkLabel(['P'], +key - 1, tokens)) {\n            // if (tokens[previousKey]['partOfSpeech']['tag'] === 'VERB') {\n            //   delete chunkPositionList[key];\n            // } else {\n            //   if (tokens[previousKey]['dependencyEdge']['headTokenIndex'] < previousKey) {\n            delete chunkPositionList[previousKey];\n            // } else {\n            //   delete chunkPositionList[key];\n            // }\n            // }\n            if (this.debug) {\n              console.log('remove chunk too short: ' + key);\n            }\n          }\n        }\n        previousKey = +key;\n      }\n    }\n    key = tokens.length - 1;\n    length = +key - previousKey + 1;\n    if (length === 1) {\n      delete chunkPositionList[previousKey];\n      if (this.debug) {\n        console.log('remove chunk too short: ' + key);\n      }\n    }\n    if (length === 2) {\n      if (previousKey !== 0 && this.checkLabel(['P'], +previousKey + 1, tokens)) {\n        delete chunkPositionList[previousKey];\n        if (this.debug) {\n          console.log('remove chunk too short: ' + key);\n        }\n      }\n    }\n    console.log(chunkPositionList);\n  }\n\n  private addChunk(chunkPositionList: Record<number, number>, index: number, tokens: any, message: string) {\n    if (index > 0 && index < tokens.length - 1) {\n      if (this.debug) {\n        console.log('add chunk ' + index + ' :' + message);\n      }\n      if (index > 1 && this.checkLabel(['P'], index - 1, tokens) &&\n        (tokens[index - 1]['text']['content'] === '(' ||\n          ((tokens[index - 1]['text']['content'] === '\"') && tokens[index - 1]['dependencyEdge']['headTokenIndex'] !== index))) {\n        chunkPositionList[index - 1] = tokens[index - 2]['text']['beginOffset'] + tokens[index - 2]['text']['content'].length;\n      } else {\n        let j = index;\n        while (j < tokens.length && this.checkLabel(['P'], j, tokens)) {\n          if (j < tokens.length - 1 && (tokens[j]['text']['content'] === '-'\n            || tokens[j]['text']['content'] === '(' || tokens[j]['text']['content'] === '\"')) {\n            break;\n          }\n          j++;\n        }\n        if (j < tokens.length - 2 && j > 0) {\n          if ((<string>tokens[j - 1]['text']['content']).includes('ã')) {\n            chunkPositionList[j] = tokens[j - 1]['text']['beginOffset'] + tokens[j - 1]['text']['content'].split('ã')[0].length;\n          } else {\n            chunkPositionList[j] = tokens[j - 1]['text']['beginOffset'] + tokens[j - 1]['text']['content'].length;\n          }\n        }\n      }\n      // if (this.checkLabel(['P'], index, tokens)) {\n      //   if (index < tokens.length - 2) {\n      //     chunkPositionList[index + 1] = tokens[index + 1]['text']['beginOffset'] - 1;\n      //   }\n      // } else {\n      //   chunkPositionList[index] = tokens[index]['text']['beginOffset'] - 1;\n      // }\n    }\n  }\n\n  private checkCCAndChunk(chunkPositionList: Record<number, number>, index: number, tokens: any, message: string) {\n    if (this.checkLabel(['CC'], index - 1, tokens)) {\n      this.addChunk(chunkPositionList, index - 1, tokens, message);\n    } else {\n      this.addChunk(chunkPositionList, index, tokens, message);\n    }\n  }\n\n  private checkLabel(label: string[], index: number, tokens: any) {\n    if (index < 0 || index >= tokens.lenght) {\n      return false;\n    }\n    let b = false;\n    for (let i = 0; i < label.length; i++) {\n      if (tokens[index]['dependencyEdge']['label'] === label[i]) {\n        b = true;\n        break;\n      }\n    }\n    return b;\n  }\n\n  private checkDependency(headTokenIndex: string, index: number, tokens: any) {\n    return tokens[index]['dependencyEdge']['headTokenIndex'] === headTokenIndex;\n  }\n\n  private checkTag(tag: string, index: number, tokens: any) {\n    return tokens[index]['partOfSpeech']['tag'] === tag;\n  }\n\n  private isConjugateVerb(index: number, tokens: any) {\n    if (index < 0 || index >= tokens.lenght) {\n      return false;\n    }\n    return tokens[index]['partOfSpeech']['tag'] === 'VERB' && (tokens[index]['partOfSpeech']['tense'] !== 'TENSE_UNKNOWN'\n      || tokens[index]['lemma'] !== tokens[index]['text']['content']);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-mglish-nl',\n  template: `\n    <p>\n      mglish-nl works!\n    </p>\n  `,\n  styles: []\n})\nexport class MglishNlComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MglishNlComponent } from './mglish-nl.component';\n\n@NgModule({\n  declarations: [MglishNlComponent],\n  imports: [\n  ],\n  exports: [MglishNlComponent]\n})\nexport class MglishNlModule { }\n"],"names":["HttpParams","Observable","Injectable","HttpClient","Component","NgModule"],"mappings":"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"}
